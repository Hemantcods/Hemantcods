name: GitHub Snake Game

on:
  schedule:
    - cron: "0 0 * * *"        # daily at midnight UTC
  workflow_dispatch:            # manual trigger
  push:
    branches: [ main ]          # on push to main

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # 1. Checkout the repo (full history)
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0         # needed to switch/fetch branches

      # 2. Generate the snake animations
      - name: Generate GitHub Contributions Snake Animations
        uses: Platane/snk@v3
        with:
          github_user_name: ${{ github.repository_owner }}
          outputs: |
            dist/github-snake.svg
            dist/github-snake-dark.svg?palette=github-dark
            dist/ocean.gif?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 3. Debug: ensure files got written
      - name: List dist contents
        run: |
          echo "---- dist directory contents ----"
          ls -al dist

      # 4. Configure Git (so commits have a user identity)
      - name: Set Git user
        run: |
          echo "---- configuring git user ----"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 5. Publish to output branch with verbose debug
      - name: Publish to output branch (manual)
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux  # fail fast, print each command

          echo "---- adding remote 'deploy' ----"
          git remote remove deploy || true
          git remote add deploy https://x-access-token:${GIT_TOKEN}@github.com/${{ github.repository }}.git

          echo "---- checking if 'output' branch exists remotely ----"
          if git ls-remote --exit-code --heads deploy output; then
            echo "→ 'output' exists, fetching it"
            git fetch deploy output
            echo "→ checking out 'output'"
            git checkout output
          else
            echo "→ 'output' does not exist, creating orphan"
            git checkout --orphan output
          fi

          echo "---- cleaning out old files ----"
          git rm -rf . || true

          echo "---- copying new dist/ files into repo root ----"
          cp -R dist/. .

          echo "---- checking for changes ----"
          if git status --porcelain | grep .; then
            echo "→ changes detected, staging & committing"
            git add .
            git commit -m "Update snake animation [skip ci]"
          else
            echo "→ no changes to commit"
          fi

          echo "---- force-pushing to output ----"
          git push deploy HEAD:output --force
